// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/A200246910/workspace/upload-store-process/services/file-storage-service/internal/upload/service.go
//
// Generated by this command:
//
//	mockgen -source=/Users/A200246910/workspace/upload-store-process/services/file-storage-service/internal/upload/service.go -destination=/Users/A200246910/workspace/upload-store-process/services/file-storage-service/internal/upload/mock_service.go -package=upload
//

// Package upload is a generated GoMock package.
package upload

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUploadService is a mock of UploadService interface.
type MockUploadService struct {
	ctrl     *gomock.Controller
	recorder *MockUploadServiceMockRecorder
	isgomock struct{}
}

// MockUploadServiceMockRecorder is the mock recorder for MockUploadService.
type MockUploadServiceMockRecorder struct {
	mock *MockUploadService
}

// NewMockUploadService creates a new mock instance.
func NewMockUploadService(ctrl *gomock.Controller) *MockUploadService {
	mock := &MockUploadService{ctrl: ctrl}
	mock.recorder = &MockUploadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadService) EXPECT() *MockUploadServiceMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockUploadService) Upload(arg0 context.Context, arg1 *UploadRequest) (*UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(*UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockUploadServiceMockRecorder) Upload(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUploadService)(nil).Upload), arg0, arg1)
}
