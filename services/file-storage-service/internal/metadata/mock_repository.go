// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/A200246910/workspace/upload-store-process/services/file-storage-service/internal/metadata/repository.go
//
// Generated by this command:
//
//	mockgen -source=/Users/A200246910/workspace/upload-store-process/services/file-storage-service/internal/metadata/repository.go -destination=/Users/A200246910/workspace/upload-store-process/services/file-storage-service/internal/metadata/mock_repository.go -package=metadata
//

// Package metadata is a generated GoMock package.
package metadata

import (
	context "context"
	reflect "reflect"
	time "time"

	metadata "github.com/yaanno/upload-store-process/services/file-storage-service/internal/domain/metadata"
	gomock "go.uber.org/mock/gomock"
)

// MockFileMetadataRepository is a mock of FileMetadataRepository interface.
type MockFileMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileMetadataRepositoryMockRecorder
	isgomock struct{}
}

// MockFileMetadataRepositoryMockRecorder is the mock recorder for MockFileMetadataRepository.
type MockFileMetadataRepositoryMockRecorder struct {
	mock *MockFileMetadataRepository
}

// NewMockFileMetadataRepository creates a new mock instance.
func NewMockFileMetadataRepository(ctrl *gomock.Controller) *MockFileMetadataRepository {
	mock := &MockFileMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockFileMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMetadataRepository) EXPECT() *MockFileMetadataRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockFileMetadataRepository) BeginTx(ctx context.Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockFileMetadataRepositoryMockRecorder) BeginTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockFileMetadataRepository)(nil).BeginTx), ctx)
}

// CleanupExpiredMetadata mocks base method.
func (m *MockFileMetadataRepository) CleanupExpiredMetadata(ctx context.Context, expirationTime time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredMetadata", ctx, expirationTime)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupExpiredMetadata indicates an expected call of CleanupExpiredMetadata.
func (mr *MockFileMetadataRepositoryMockRecorder) CleanupExpiredMetadata(ctx, expirationTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredMetadata", reflect.TypeOf((*MockFileMetadataRepository)(nil).CleanupExpiredMetadata), ctx, expirationTime)
}

// CommitTx mocks base method.
func (m *MockFileMetadataRepository) CommitTx(ctx context.Context, tx any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockFileMetadataRepositoryMockRecorder) CommitTx(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockFileMetadataRepository)(nil).CommitTx), ctx, tx)
}

// CreateFileMetadata mocks base method.
func (m *MockFileMetadataRepository) CreateFileMetadata(ctx context.Context, metadata *metadata.FileMetadataRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileMetadata", ctx, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileMetadata indicates an expected call of CreateFileMetadata.
func (mr *MockFileMetadataRepositoryMockRecorder) CreateFileMetadata(ctx, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileMetadata", reflect.TypeOf((*MockFileMetadataRepository)(nil).CreateFileMetadata), ctx, metadata)
}

// IsFileOwnedByUser mocks base method.
func (m *MockFileMetadataRepository) IsFileOwnedByUser(ctx context.Context, opts *metadata.FileMetadataListOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileOwnedByUser", ctx, opts)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFileOwnedByUser indicates an expected call of IsFileOwnedByUser.
func (mr *MockFileMetadataRepositoryMockRecorder) IsFileOwnedByUser(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileOwnedByUser", reflect.TypeOf((*MockFileMetadataRepository)(nil).IsFileOwnedByUser), ctx, opts)
}

// ListFileMetadata mocks base method.
func (m *MockFileMetadataRepository) ListFileMetadata(ctx context.Context, opts *metadata.FileMetadataListOptions) ([]*metadata.FileMetadataRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFileMetadata", ctx, opts)
	ret0, _ := ret[0].([]*metadata.FileMetadataRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFileMetadata indicates an expected call of ListFileMetadata.
func (mr *MockFileMetadataRepositoryMockRecorder) ListFileMetadata(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFileMetadata", reflect.TypeOf((*MockFileMetadataRepository)(nil).ListFileMetadata), ctx, opts)
}

// RemoveFileMetadata mocks base method.
func (m *MockFileMetadataRepository) RemoveFileMetadata(ctx context.Context, fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFileMetadata", ctx, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFileMetadata indicates an expected call of RemoveFileMetadata.
func (mr *MockFileMetadataRepositoryMockRecorder) RemoveFileMetadata(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFileMetadata", reflect.TypeOf((*MockFileMetadataRepository)(nil).RemoveFileMetadata), ctx, fileID)
}

// RetrieveFileMetadataByID mocks base method.
func (m *MockFileMetadataRepository) RetrieveFileMetadataByID(ctx context.Context, fileID string) (*metadata.FileMetadataRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFileMetadataByID", ctx, fileID)
	ret0, _ := ret[0].(*metadata.FileMetadataRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFileMetadataByID indicates an expected call of RetrieveFileMetadataByID.
func (mr *MockFileMetadataRepositoryMockRecorder) RetrieveFileMetadataByID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFileMetadataByID", reflect.TypeOf((*MockFileMetadataRepository)(nil).RetrieveFileMetadataByID), ctx, fileID)
}

// RollbackTx mocks base method.
func (m *MockFileMetadataRepository) RollbackTx(ctx context.Context, tx any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockFileMetadataRepositoryMockRecorder) RollbackTx(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockFileMetadataRepository)(nil).RollbackTx), ctx, tx)
}

// SoftDeleteMetadata mocks base method.
func (m *MockFileMetadataRepository) SoftDeleteMetadata(ctx context.Context, fileID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteMetadata", ctx, fileID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteMetadata indicates an expected call of SoftDeleteMetadata.
func (mr *MockFileMetadataRepositoryMockRecorder) SoftDeleteMetadata(ctx, fileID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteMetadata", reflect.TypeOf((*MockFileMetadataRepository)(nil).SoftDeleteMetadata), ctx, fileID, userID)
}

// UpdateFileMetadata mocks base method.
func (m *MockFileMetadataRepository) UpdateFileMetadata(ctx context.Context, metadata *metadata.FileMetadataRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileMetadata", ctx, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileMetadata indicates an expected call of UpdateFileMetadata.
func (mr *MockFileMetadataRepositoryMockRecorder) UpdateFileMetadata(ctx, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileMetadata", reflect.TypeOf((*MockFileMetadataRepository)(nil).UpdateFileMetadata), ctx, metadata)
}
