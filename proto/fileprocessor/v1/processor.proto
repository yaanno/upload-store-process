syntax = "proto3";

package fileprocessor.v1;

import "shared/v1/shared.proto";

option go_package = "github.com/yaanno/upload-store-process/gen/go/fileprocessor/v1";

// FileProcessorService handles file processing and transformation
service FileProcessorService {
  // Process uploaded file
  rpc ProcessFile(ProcessFileRequest) returns (ProcessFileResponse) {}

  // Transform file content
  rpc TransformFile(TransformFileRequest) returns (TransformFileResponse) {}

  // Get processing status
  rpc GetProcessingStatus(GetProcessingStatusRequest) returns (GetProcessingStatusResponse) {}
}
// Request to process a file
message ProcessFileRequest {
  string file_id = 1;
  string user_id = 2;
  ProcessingOptions options = 3;
}

// Processing configuration options
message ProcessingOptions {
  bool extract_metadata = 1;
  bool validate_content = 2;
  repeated string transformations = 3;
  map<string, string> transformation_parameters = 4;
}

// Response after file processing
message ProcessFileResponse {
  shared.v1.Response base_response = 1;
  string processed_file_id = 2;
  shared.v1.FileMetadata metadata = 3;
  bool processing_successful = 4;
}

// Request for file transformation
message TransformFileRequest {
  string file_id = 1;
  string user_id = 2;
  repeated string transformations = 3;
  string content_type = 4;
}

// Response after file transformation
message TransformFileResponse {
  shared.v1.Response base_response = 1;
  string transformed_file_id = 2;
  int64 transformation_time_ms = 3;
}

// Request to check processing status
message GetProcessingStatusRequest {
  string file_id = 1;
  string user_id = 2;
}

// Response with processing status
message GetProcessingStatusResponse {
  shared.v1.Response base_response = 1;
  shared.v1.ProcessingStatus status = 2;
  string error_message = 3;
  int64 progress_percentage = 4;
}
